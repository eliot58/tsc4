{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  builder res = begin_cell();
  res~store_uint(0, 32);
  cell body = begin_cell()
      .store_uint(0, 32)
      .store_slice("a bcdefgh")
  .end_cell();

  slice s = body.begin_parse();

  s~load_uint(32);
  
  int shift_amount = shift % 26;

  

  while (s.slice_refs() != 0) {
    slice ss = s;
    builder str = begin_cell();
    while (~ ss.slice_empty?()) {
      int char = ss~load_uint(8);
      if (char >= 97) {
        str~store_uint(((char - 97 + shift_amount) % 26) + 97, 8);
      } else {
        str~store_uint(((char - 65 + shift_amount) % 26) + 65, 8);
      }
    }
    res.store_slice(str.end_cell().begin_parse());
    s = s~load_ref().begin_parse();
  }
  
  return res.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return begin_cell().end_cell();
}

