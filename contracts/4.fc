{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(slice) encrypt (slice s, int shift_amount) {
  builder str = begin_cell();
  while (~ s.slice_empty?()) {
    int char = s~load_uint(8);
    if (char >= 97) {
      str~store_uint(((char - 97 + shift_amount) % 26) + 97, 8);
    } else {
      str~store_uint(((char - 65 + shift_amount) % 26) + 65, 8);
    }
  }
  return str;
}

(slice) decrypt (slice s, int shift_amount) {
  builder str = begin_cell();
  while (~ s.slice_empty?()) {
    int char = s~load_uint(8);
    if (char >= 97) {
      str~store_uint(((char - 97 - shift_amount) % 26) + 97, 8);
    } else {
      str~store_uint(((char - 65 - shift_amount) % 26) + 65, 8);
    }
  }
  return str;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  builder res = begin_cell();
  res~store_uint(0, 32);

  slice s = text.begin_parse();

  s~load_uint(32);

  int shift_amount = shift % 26;

  tuple stack_res = null();

  tuple stack = null();

  stack~push_back(c);

  while (~ stack.is_null()) {

    slice s = stack~pop_back().begin_parse();

    stack_res~push_back(encrypt(s,shift_amount));

    repeat (s.slice_refs()) {
        stack~push_back(s~load_ref());
    }
  }

  while (~ stack_res.is_null()){
    slice s = stack_res~pop_back();
    
  }
  
  return res.end_cell();

}


;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  builder res = begin_cell();
  res~store_uint(0, 32);

  slice s = text.begin_parse();

  s~load_uint(32);
  
  int shift_amount = shift % 26;


  
  return res.end_cell();
}

